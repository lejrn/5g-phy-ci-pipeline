name: 5G PHY CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # 1. Local tests and validation (Poetry-based) + Robot Framework tests
  local-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Run linting
      run: |
        poetry run flake8 radio_sim tests --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 radio_sim tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Run type checking
      run: poetry run mypy radio_sim --ignore-missing-imports --disable-error-code=no-any-return
    
    - name: Run unit tests
      run: |
        poetry run pytest tests/ -v --tb=short --cov=radio_sim --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Run simulation
      run: |
        poetry run radio-sim --bits 5000 --snr-start 10 --snr-stop 20 --snr-step 2
    
    - name: Run Robot Framework tests (local)
      run: |
        poetry run robot --outputdir robot/results robot/simulation_tests.robot
    
    - name: Upload test coverage artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: htmlcov/
    
    - name: Upload Robot Framework results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: robot-results
        path: |
          robot/results/log.html
          robot/results/output.xml
          robot/results/report.html

  # 2. Docker build (parallel with local-tests)
  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t 5g-phy-ci:latest .

  # 3. Docker tests (depends on docker-build completion) + Robot Docker tests
  docker-tests:
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t 5g-phy-ci:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm --entrypoint="" 5g-phy-ci:latest poetry run pytest -v
    
    - name: Run simulation in Docker
      run: |
        docker run --rm 5g-phy-ci:latest --bits 1000 --snr-start 15 --snr-stop 20
    
    - name: Run Robot Framework Docker tests
      run: |
        docker run --rm --entrypoint="" 5g-phy-ci:latest poetry run robot --outputdir /tmp/robot-results robot/simulation_tests_docker.robot
    
    - name: Copy Robot results from container
      run: |
        # Create a temporary container to copy results
        docker create --name temp-container 5g-phy-ci:latest
        docker cp temp-container:/tmp/robot-results ./robot-docker-results
        docker rm temp-container
    
    - name: Upload Robot Framework Docker results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: robot-docker-results
        path: |
          robot-docker-results/log.html
          robot-docker-results/output.xml
          robot-docker-results/report.html
